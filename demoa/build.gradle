android {
    compileSdkVersion Integer.valueOf(version_compileSdkVersion)
//    buildToolsVersion version_buildToolsVersion

    defaultConfig {
        applicationId "sviolet.demoa"
        minSdkVersion Integer.valueOf(version_minSdkVersion)
        targetSdkVersion Integer.valueOf(version_targetSdkVersion)
        versionCode Integer.valueOf(version_projectVersionCode)
        versionName version_projectVersionName

        //[MultiDex]true:多dex允许,突破类65535的限制
        multiDexEnabled true

        ndk {
            //使得APK中只包含指定版本的so库(AS3.2以后armeabi可能被抛弃)
            abiFilters "armeabi", "armeabi-v7a", "x86"
        }
    }

    dexOptions {
        //dex编译的最大内存(2g/4g, 4g会较快)
        javaMaxHeapSize dex_maxHeapSize

        //[MultiDex]与multiDexEnabled配套使用, 设置单Dex最大方法数, 一般情况下设置40000
        preDexLibraries = false
        additionalParameters = ['--multi-dex',
                                '--set-max-idx-number=40000']
    }

    buildTypes {
        release {
            postprocessing {
                removeUnusedCode false
                removeUnusedResources false
                obfuscate false
                optimizeCode false
                debuggable false
                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
                //自定义参数, 程序中BuildConfig._DEBUG获得
                buildConfigField "boolean", "_DEBUG", "false"
            }
        }
        debug {
            postprocessing {
                removeUnusedCode false
                removeUnusedResources false
                obfuscate false
                optimizeCode false
                debuggable true
                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
                //自定义参数, 程序中BuildConfig._DEBUG获得
                buildConfigField "boolean", "_DEBUG", "true"
            }
        }
    }

    sourceSets {
        main {
            //指定JNI的so库路径
            jniLibs.srcDirs = ['libs']
        }
    }

    //多渠道打包///////////////////////////////////////////////////////////////////
    //左侧工具栏--BuildVariants, 可配置调试时的flavor类型

    //flavor维度, 使得productFlavors具有多个维度, 例如:发布渠道, 测试/生产环境
//    flavorDimensions "channel", "environment"

    //flavor配置
//    productFlavors {
//        google {//谷歌市场
//            dimension "channel"
//            buildConfigField 'String', 'CHANNEL', '"谷歌市场版"'
//        }
//        wandoujia {//豌豆荚市场
//            dimension "channel"
//            buildConfigField 'String', 'CHANNEL', '"豌豆荚市场版"'
//        }
//        prod {//生产环境
//            dimension "environment"
//            manifestPlaceholders = [APP_NAME: "demoa"]//生产应用名(在Manifest中用${APP_NAME}取值)
//            applicationId "sviolet.demoa"//生产包名
//            buildConfigField 'String', 'URL', '"https://github.com/shepherdviolet/"'//生产URL
//        }
//        dev {//开发环境
//            dimension "environment"
//            manifestPlaceholders = [APP_NAME: "demoa-test"]//测试应用名(在Manifest中用${APP_NAME}取值)
//            applicationId "sviolet.demoa.test"//测试包名
//            buildConfigField 'String', 'URL', '"https://github.com/shepherdviolet/test"'//测试URL
//        }
//    }

    //过滤维度组合
//    variantFilter { variant ->
//        // release 忽略 除了prod以外的环境
//        if (variant.buildType.name == 'release') {
//            //get(1)表示获取第二个维度(即environment)
//            variant.setIgnore(variant.getFlavors().get(1).name != 'prod')
//        }
//        // debug 忽略 prod环境
//        if (variant.buildType.name == 'debug') {
//            //get(1)表示获取第二个维度(即environment)
//            variant.setIgnore(variant.getFlavors().get(1).name == 'prod')
//        }
//    }

    // 测试依赖(Android P)

    // Required if using classes in android.test.runner
//    useLibrary 'android.test.runner'
    // Required if using classes in android.test.base
//    useLibrary 'android.test.base'
    // Required if using classes in android.test.mock
//    useLibrary 'android.test.mock'

}

dependencies {
    //implementation依赖的库, 对上一层依赖不可见. api依赖的库, 对上一层依赖可见
    implementation fileTree(include: ['*.jar'], dir: 'libs')//这个配置会自动在混淆时引入Jar包, 不要在proguard-rules.pro中配置-libraryjars, 否则会报错!
    implementation project(':turquoise') { group 'com.github.shepherdviolet.turquoise'; version version_projectVersionName }//指定groupId和version, artifactId为project名
    implementation "com.android.support:support-v4:$version_supportVersion"
    implementation "com.android.support:appcompat-v7:$version_supportVersion"
    implementation 'com.github.zcweng:switch-button:0.0.3@aar'
    implementation 'com.google.zxing:core:3.3.1'
}
